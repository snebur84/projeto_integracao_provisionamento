---
name: Deploy AWS infra

on:
  workflow_dispatch:
    inputs:
      environment:
        required: true
        default: prod

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Check required AWS secrets
        run: |
          set -euo pipefail
          if [ -z "${{ secrets.AWS_ACCESS_KEY_ID }}" ]; then
            echo "ERROR: missing secret AWS_ACCESS_KEY_ID"
            exit 1
          fi
          if [ -z "${{ secrets.AWS_SECRET_ACCESS_KEY }}" ]; then
            echo "ERROR: missing secret AWS_SECRET_ACCESS_KEY"
            exit 1
          fi
          if [ -z "${{ secrets.AWS_SESSION_TOKEN }}" ]; then
            echo "ERROR: missing secret AWS_SESSION_TOKEN"
            exit 1
          fi

  deploy-aws:
    runs-on: ubuntu-latest
    needs: validate
    env:
      TF_IN_AUTOMATION: true

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      - name: Bootstrap - write tfvars (auto names)
        working-directory: infra/terraform/bootstrap/aws
        env:
          ENV_NAME: ${{ github.event.inputs.environment }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          REPO: ${{ github.repository }}
          RUN_ID: ${{ github.run_id }}
        run: |
          set -euo pipefail
          repo_name="${REPO##*/}"
          proj="$(printf '%s' "$repo_name" \
            | tr '[:upper:]' '[:lower:]' \
            | sed -E 's/[^a-z0-9-]+/-/g' \
            | sed -E 's/^-+//; s/-+$//')"
          if [ -z "$proj" ]; then
            proj="project"
          fi
          if printf '%s' "$proj" | grep -qE '^[^a-z]'; then
            proj="p-${proj}"
          fi
          ts="$(date +%s%N)"
          rand="${RANDOM}"
          hash="$(printf '%s' "${REPO}-${RUN_ID}-${ts}-${rand}" \
            | sha256sum | cut -c1-8 | tr -dc 'a-z0-9')"
          bucket="${proj}-${hash}"
          ddb="${proj}-ddb-${hash}"
          max_len=63
          if [ "${#bucket}" -gt "$max_len" ]; then
            allow_proj_len=$((max_len - 1 - ${#hash}))
            proj_short="$(printf '%s' "$proj" | cut -c1-"$allow_proj_len")"
            bucket="${proj_short}-${hash}"
            ddb="${proj_short}-ddb-${hash}"
          fi
          bucket="$(printf '%s' "$bucket" | sed -E 's/^-+//; s/-+$//')"
          if printf '%s' "$bucket" | grep -qE \
            '^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$'; then
            bucket="p-${bucket}"
          fi
          if [ "${#ddb}" -lt 3 ]; then
            ddb="${ddb}01"
          fi
          OUT=tfvars.tmp
          printf 'state_bucket_name = "%s"\n' "$bucket" > "$OUT"
          printf 'dynamodb_table_name = "%s"\n' "$ddb" >> "$OUT"
          printf 'aws_region = "%s"\n' "${AWS_REGION:-us-east-1}" >> "$OUT"
          mv "$OUT" terraform.tfvars
          echo "WROTE: state_bucket_name=${bucket}"
          echo "WROTE: dynamodb_table_name=${ddb}"

      - name: Bootstrap - init and apply
        working-directory: infra/terraform/bootstrap/aws
        run: |
          set -euo pipefail
          terraform init -input=false
          terraform apply -auto-approve -input=false

      - name: Get bootstrap outputs - save JSON
        working-directory: infra/terraform/bootstrap/aws
        id: bootstrap
        run: |
          set -euo pipefail
          terraform output -json > /tmp/bootstrap.raw 2> /tmp/bootstrap.err || true
          if [ -s /tmp/bootstrap.err ]; then
            echo "NOTE: terraform wrote to stderr:"
            sed -n '1,200p' /tmp/bootstrap.err || true
          fi
          if jq '.' /tmp/bootstrap.raw > /tmp/bootstrap.json 2> /tmp/jq.err; then
            echo "Valid JSON saved to /tmp/bootstrap.json"
          else
            echo "ERROR: 'jq' failed to parse terraform output."
            echo "--- raw terraform output ---"
            sed -n '1,200p' /tmp/bootstrap.raw || true
            echo "--- terraform stderr ---"
            sed -n '1,200p' /tmp/bootstrap.err || true
            echo "--- jq error ---"
            sed -n '1,200p' /tmp/jq.err || true
            exit 1
          fi

      - name: Export bootstrap outputs as env
        working-directory: infra/terraform/bootstrap/aws
        run: |
          set -euo pipefail
          if [ ! -s /tmp/bootstrap.json ]; then
            echo "ERROR: /tmp/bootstrap.json missing or empty"
            ls -l /tmp || true
            exit 1
          fi
          TF_BUCKET=$(jq -r '
            .state_bucket.value // .state_bucket_name.value //
            .bucket.value // empty' /tmp/bootstrap.json)
          TF_DDB=$(jq -r '
            .dynamodb_table.value // .dynamodb_table_name.value //
            .ddb.value // empty' /tmp/bootstrap.json)
          if [ -z "$TF_BUCKET" ] || [ -z "$TF_DDB" ]; then
            echo "ERROR: expected outputs not found; keys present:"
            jq 'keys' /tmp/bootstrap.json || true
            sed -n '1,200p' /tmp/bootstrap.json || true
            exit 1
          fi
          printf 'TF_BUCKET=%s\n' "$TF_BUCKET" >> $GITHUB_ENV
          printf 'TF_DDB=%s\n' "$TF_DDB" >> $GITHUB_ENV
          echo "Exported TF_BUCKET and TF_DDB"

      - name: Write backend.hcl for AWS infra
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          ENV_NAME: ${{ github.event.inputs.environment }}
        run: |
          set -euo pipefail
          mkdir -p infra/terraform/aws
          env="${ENV_NAME:-prod}"
          KEY_PATH="env/${env}/terraform.tfstate"
          OUT=infra/terraform/aws/backend.hcl
          printf 'bucket         = "%s"\n' "$TF_BUCKET" > "$OUT"
          printf 'key            = "%s"\n' "$KEY_PATH" >> "$OUT"
          printf 'region         = "%s"\n' "$AWS_REGION" >> "$OUT"
          printf 'dynamodb_table = "%s"\n' "$TF_DDB" >> "$OUT"
          sed -n '1,120p' "$OUT"

      - name: Terraform init (aws infra)
        working-directory: infra/terraform/aws
        run: |
          set -euo pipefail
          terraform init -backend-config=backend.hcl -reconfigure \
            -input=false

      - name: Terraform apply (aws infra)
        working-directory: infra/terraform/aws
        run: |
          set -euo pipefail
          terraform apply -auto-approve -input=false

      - name: Output results
        if: success()
        working-directory: infra/terraform/aws
        run: terraform output -json
