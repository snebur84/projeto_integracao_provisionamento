---
name: Deploy AWS infra

on:
  workflow_dispatch:
    inputs:
      environment:
        required: true
        default: prod

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Check required AWS secrets
        run: |
          set -euo pipefail
          if [ -z "${{ secrets.AWS_ACCESS_KEY_ID }}" ]; then
            echo "ERROR: missing secret AWS_ACCESS_KEY_ID"
            exit 1
          fi
          if [ -z "${{ secrets.AWS_SECRET_ACCESS_KEY }}" ]; then
            echo "ERROR: missing secret AWS_SECRET_ACCESS_KEY"
            exit 1
          fi
          if [ -z "${{ secrets.AWS_SESSION_TOKEN }}" ]; then
            echo "ERROR: missing secret AWS_SESSION_TOKEN"
            exit 1
          fi

  deploy-aws:
    runs-on: ubuntu-latest
    needs: validate
    env:
      TF_IN_AUTOMATION: true

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials - session token included
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      - name: Bootstrap - write variables file
        working-directory: terraform/bootstrap/aws
        env:
          ENV_NAME: ${{ github.event.inputs.environment }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          set -euo pipefail
          env="${ENV_NAME:-prod}"
          printf 'environment = "%s"\n' "$env" > terraform.tfvars
          printf 'aws_region = "%s"\n' "$AWS_REGION" >> terraform.tfvars

      - name: Bootstrap - init and apply
        working-directory: terraform/bootstrap/aws
        run: |
          set -euo pipefail
          terraform init -input=false
          terraform apply -auto-approve -input=false

      - name: Get bootstrap outputs - save JSON
        working-directory: terraform/bootstrap/aws
        id: bootstrap
        run: |
          set -euo pipefail
          terraform output -json > /tmp/bootstrap.json

      - name: Export bootstrap outputs as env vars
        run: |
          set -euo pipefail
          TF_BUCKET=$(jq -r '.state_bucket.value' /tmp/bootstrap.json)
          TF_DDB=$(jq -r '.dynamodb_table.value' /tmp/bootstrap.json)
          printf 'TF_BUCKET=%s\n' "$TF_BUCKET" >> $GITHUB_ENV
          printf 'TF_DDB=%s\n' "$TF_DDB" >> $GITHUB_ENV
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          ENV_NAME: ${{ github.event.inputs.environment }}

      - name: Write backend.hcl for AWS infra - no heredoc
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          ENV_NAME: ${{ github.event.inputs.environment }}
        run: |
          set -euo pipefail
          mkdir -p infra/terraform/aws
          env="${ENV_NAME:-prod}"
          printf 'bucket         = "%s"\n' "$TF_BUCKET" \
            > infra/terraform/aws/backend.hcl
          printf 'key            = "%s"\n' \
            "env/${env}/terraform.tfstate" \
            >> infra/terraform/aws/backend.hcl
          printf 'region         = "%s"\n' "$AWS_REGION" \
            >> infra/terraform/aws/backend.hcl
          printf 'dynamodb_table = "%s"\n' "$TF_DDB" \
            >> infra/terraform/aws/backend.hcl
          sed -n '1,120p' infra/terraform/aws/backend.hcl

      - name: Terraform init (aws infra)
        working-directory: infra/terraform/aws
        run: |
          set -euo pipefail
          terraform init -backend-config=backend.hcl -reconfigure -input=false

      - name: Terraform apply (aws infra)
        working-directory: infra/terraform/aws
        run: |
          set -euo pipefail
          terraform apply -auto-approve -input=false

      - name: Output results
        if: success()
        working-directory: infra/terraform/aws
        run: terraform output -json
