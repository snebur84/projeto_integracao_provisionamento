---
# .github/workflows/deploy.yml

name: Provision App CI/CD to Cloud Run

on:
  # Permite o deploy manual via UI do GitHub, controlando a branch
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to deploy'
        required: true
        default: 'gcp-deploy'

# Configurações globais usando seus secrets e vars
env:
  # Informações básicas do projeto/ambiente
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT }}
  GCP_REGION: ${{ secrets.GCP_REGION }}
  SERVICE_NAME: provision-app
  
  # Service Account (SA) de uso geral
  WIF_SA_EMAIL: ${{ vars.GCP_SA_EMAIL }}
  
  # Backend do Terraform
  TF_STATE_BUCKET: tf-state-provision-bucket # Deve ser o nome único do seu bucket de estado

jobs:
  # ---------------------------------------------------------------------
  # 1. INFRASTRUCTURE (Provisiona/Atualiza a infraestrutura via Terraform)
  # ---------------------------------------------------------------------
  infrastructure:
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write' 
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }} 
      
      - name: Clear Conflicting Environment Variable
        run: echo "GCP_WORKLOAD_IDENTITY_PROVIDER=" >> $GITHUB_ENV

      - name: Google Auth (Workload Identity)
        id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_AUDIENCE_ID }} 
          service_account: ${{ env.WIF_SA_EMAIL }}
          
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ steps.auth.outputs.access_token }}
          
      - name: Terraform Init
        run: terraform init -backend-config="bucket=${{ env.TF_STATE_BUCKET }}"
        working-directory: infra/gcp

      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve -input=false -json
        working-directory: infra/gcp
        env:
          # Variáveis do Terraform (necessárias para os arquivos .tf)
          TF_VAR_gcp_project_id: ${{ env.GCP_PROJECT_ID }}
          TF_VAR_gcp_region: ${{ env.GCP_REGION }}
          TF_VAR_app_name: ${{ env.SERVICE_NAME }}

      - name: Get Terraform Outputs
        id: outputs
        run: |
          # Você precisa adicionar 'gcs_bucket_name' como uma saída no seu terraform
          # Ex: output "gcs_bucket_name" { value = google_storage_bucket.static_files.name }
          BUCKET_NAME=$(terraform output -raw gcs_bucket_name)
          echo "GCS_BUCKET_NAME=$BUCKET_NAME" >> $GITHUB_ENV
        working-directory: infra/gcp
      
  # ---------------------------------------------------------------------
  # 2. BUILD (Cria a imagem Docker e envia para o Artifact Registry)
  # ---------------------------------------------------------------------
  build:
    needs: [infrastructure]
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }} 
        
      - name: Google Auth (Workload Identity)
        id: auth-build
        uses: google-github-actions/auth@v2
        with:
          # CORREÇÃO: Usa o Secret único com a string WIF no formato limpo
          workload_identity_provider: ${{ secrets.GCP_WIF_AUDIENCE_ID }}
          service_account: ${{ env.WIF_SA_EMAIL }}
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure Docker to Artifact Registry
        run: gcloud auth configure-docker ${{ env.GCP_REGION }}-docker.pkg.dev --quiet

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: . # Assume que o Dockerfile está na raiz do repositório
          push: true
          tags: ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.SERVICE_NAME }}-repo/${{ env.SERVICE_NAME }}:latest
          
  # ---------------------------------------------------------------------
  # 3. DEPLOY (Atualiza o serviço Cloud Run com a nova imagem)
  # ---------------------------------------------------------------------
  deploy:
    needs: [build]
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - name: Google Auth (Workload Identity)
        uses: google-github-actions/auth@v2
        with:
          # CORREÇÃO: Usa o Secret único com a string WIF no formato limpo
          workload_identity_provider: ${{ secrets.GCP_WIF_AUDIENCE_ID }}
          service_account: ${{ env.WIF_SA_EMAIL }}
      
      - name: Deploy to Cloud Run
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ env.SERVICE_NAME }}
          region: ${{ env.GCP_REGION }}
          # O Terraform já definiu todas as variáveis de ambiente e secrets.
          # Este passo apenas atualiza a imagem do contêiner.
          image: ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.SERVICE_NAME }}-repo/${{ env.SERVICE_NAME }}:latest
