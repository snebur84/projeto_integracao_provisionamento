---
name: Deploy GCP Infrastructure

on:
  workflow_dispatch:
    inputs:
      environment:
        description: >
          Target environment (ex.: prod, staging, dev)
        required: false
        default: prod
  push:
    branches:
      - main
    paths:
      - infra/terraform/**
      - .github/workflows/deploy-gcp.yml

permissions:
  contents: read
  id-token: write

concurrency:
  group: deploy-gcp-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    name: Deploy to GCP
    runs-on: ubuntu-latest

    # Expose repo Variables (vars) and Secrets (secrets) as environment.
    # We'll resolve precedence (vars then secrets) in the next step.
    env:
      TF_IN_AUTOMATION: "true"

      # Identity via WIF (prefer Variables, fallback to Secrets)
      GCP_WIF_PROVIDER_V: ${{ vars.GCP_WIF_PROVIDER }}
      GCP_SA_EMAIL_V: ${{ vars.GCP_SA_EMAIL }}
      GCP_WIF_PROVIDER_S: ${{ secrets.GCP_WIF_PROVIDER }}
      GCP_SA_EMAIL_S: ${{ secrets.GCP_SA_EMAIL }}
      GCP_SA_KEY_S: ${{ secrets.GCP_SA_KEY }}

      # Project/region (prefer Variables, fallback to Secrets)
      GCP_PROJECT_V: ${{ vars.GCP_PROJECT }}
      GCP_REGION_V: ${{ vars.GCP_REGION }}
      GCP_PROJECT_S: ${{ secrets.GCP_PROJECT }}
      GCP_REGION_S: ${{ secrets.GCP_REGION }}

      # Optional pre-created state bucket
      TF_BUCKET_SECRET: ${{ secrets.TF_BUCKET }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Resolve inputs (prefer vars, fallback to secrets)
        shell: bash
        run: |
          set -euo pipefail

          # Prefer Variables; fallback to Secrets
          wif="${GCP_WIF_PROVIDER_V:-}"
          [ -z "$wif" ] && wif="${GCP_WIF_PROVIDER_S:-}"

          sa_email="${GCP_SA_EMAIL_V:-}"
          [ -z "$sa_email" ] && sa_email="${GCP_SA_EMAIL_S:-}"

          sa_key="${GCP_SA_KEY_S:-}"

          project="${GCP_PROJECT_V:-}"
          [ -z "$project" ] && project="${GCP_PROJECT_S:-}"

          region="${GCP_REGION_V:-}"
          [ -z "$region" ] && region="${GCP_REGION_S:-}"
          [ -z "$region" ] && region="us-central1"

          {
            echo "RES_GCP_WIF_PROVIDER=$wif"
            echo "RES_GCP_SA_EMAIL=$sa_email"
            echo "RES_GCP_SA_KEY=$sa_key"
            echo "RES_GCP_PROJECT=$project"
            echo "RES_GCP_REGION=$region"
          } >> "$GITHUB_ENV"

          echo "Resolved:"
          echo " - RES_GCP_WIF_PROVIDER: ${wif:+set}"
          echo " - RES_GCP_SA_EMAIL:     ${sa_email:+set}"
          echo " - RES_GCP_SA_KEY:       ${sa_key:+set}"
          echo " - RES_GCP_PROJECT:      ${project:-<empty>}"
          echo " - RES_GCP_REGION:       ${region:-<empty>}"

      - name: Auth via Workload Identity Federation
        if: >-
          ${{ env.RES_GCP_WIF_PROVIDER != '' &&
              env.RES_GCP_SA_EMAIL != '' }}
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: >-
            ${{ env.RES_GCP_WIF_PROVIDER }}
          service_account: >-
            ${{ env.RES_GCP_SA_EMAIL }}
          token_format: access_token

      - name: Auth via Service Account Key (fallback)
        if: >-
          ${{ (env.RES_GCP_WIF_PROVIDER == '' ||
               env.RES_GCP_SA_EMAIL == '') &&
              env.RES_GCP_SA_KEY != '' }}
        uses: google-github-actions/auth@v2
        with:
          credentials_json: >-
            ${{ env.RES_GCP_SA_KEY }}

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.RES_GCP_PROJECT }}
          export_default_credentials: true

      - name: Verify gcloud auth
        shell: bash
        run: |
          set -euo pipefail
          gcloud auth list --filter=status:ACTIVE
          gcloud config list

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      - name: Bootstrap - write tfvars
        working-directory: infra/terraform/bootstrap/gcp
        env:
          ENV_NAME: ${{ github.event.inputs.environment }}
        shell: bash
        run: |
          set -euo pipefail

          env_name="${ENV_NAME:-prod}"
          project="${RES_GCP_PROJECT:?missing GCP project}"
          region="${RES_GCP_REGION:-us-central1}"

          # Bucket name (<= 63 chars; lowercase; safe chars only)
          bucket="${project}-tfstate-${env_name}"
          bucket="$(printf '%s' "$bucket" \
            | tr '[:upper:]' '[:lower:]' \
            | sed 's/[^a-z0-9-]/-/g' \
            | cut -c1-63)"

          {
            printf 'project = "%s"\n' "$project"
            printf 'region = "%s"\n' "$region"
            printf 'state_bucket_name = "%s"\n' "$bucket"
          } > terraform.tfvars

          echo "Wrote terraform.tfvars:"
          sed -n '1,120p' terraform.tfvars

      - name: Import existing state bucket if present
        working-directory: infra/terraform/bootstrap/gcp
        shell: bash
        run: |
          set -euo pipefail

          if [ ! -f terraform.tfvars ]; then
            echo "terraform.tfvars not found; skipping import"
            exit 0
          fi

          BUCKET="$(
            awk -F '\"' '/state_bucket_name/ {print $2; exit}' \
              terraform.tfvars || true
          )"

          if [ -z "$BUCKET" ]; then
            echo "state_bucket_name not found; skipping import"
            exit 0
          fi

          echo "Checking bucket: gs://$BUCKET"
          if gsutil ls -b "gs://$BUCKET" >/dev/null 2>&1; then
            echo "Bucket exists; importing to state if needed."
            terraform init -input=false

            if terraform state list \
              | grep -q '^google_storage_bucket\.terraform_state$'
            then
              echo "Already in state; skipping import."
            else
              terraform import -lock=false \
                'google_storage_bucket.terraform_state' \
                "$BUCKET" || {
                  echo "terraform import failed"
                  terraform state list || true
                  exit 1
                }
            fi
          else
            echo "Bucket does not exist; will be created by Terraform."
          fi

      - name: Bootstrap - init and apply
        working-directory: infra/terraform/bootstrap/gcp
        shell: bash
        run: |
          set -euo pipefail
          terraform init -input=false
          terraform apply -auto-approve -input=false

      - name: Use TF_BUCKET from secret if provided
        shell: bash
        run: |
          set -euo pipefail
          if [ -n "${TF_BUCKET_SECRET:-}" ]; then
            echo "TF_BUCKET=${TF_BUCKET_SECRET}" >> "$GITHUB_ENV"
            echo "Using TF_BUCKET from secret; skip parsing outputs."
          else
            echo "No TF_BUCKET secret; will parse Terraform outputs."
          fi

      - name: Get bootstrap outputs - save JSON (robust)
        if: ${{ env.TF_BUCKET == '' }}
        working-directory: infra/terraform/bootstrap/gcp
        id: bootstrap
        shell: bash
        run: |
          set -euo pipefail

          terraform output -json > /tmp/bootstrap.raw \
            2> /tmp/bootstrap.err || true

          if [ -s /tmp/bootstrap.err ]; then
            echo "NOTE: terraform wrote to stderr:"
            sed -n '1,200p' /tmp/bootstrap.err || true
          fi

          # Extract first balanced JSON object from raw text
          python - <<'PY' > /tmp/bootstrap.json \
            2> /tmp/bootstrap.py.err || true
          import sys, json
          s=open('/tmp/bootstrap.raw','r',errors='replace').read()
          i=s.find('{')
          if i==-1:
              sys.stderr.write('no JSON object start found\n'); sys.exit(2)
          depth=0
          end=-1
          for idx,ch in enumerate(s[i:], start=i):
              if ch=='{': depth+=1
              elif ch=='}': depth-=1
              if depth==0:
                  end=idx
                  break
          if end==-1:
              sys.stderr.write('no matching closing brace found\n'); sys.exit(3)
          js=s[i:end+1]
          try:
              obj=json.loads(js)
          except Exception as e:
              sys.stderr.write('json loads failed: %s\n' % e)
              sys.exit(4)
          sys.stdout.write(json.dumps(obj))
          PY

          if [ -s /tmp/bootstrap.py.err ]; then
            echo "ERROR: python extraction failed:"
            sed -n '1,200p' /tmp/bootstrap.py.err || true
            echo "--- raw terraform output ---"
            sed -n '1,200p' /tmp/bootstrap.raw || true
            exit 1
          fi

          if ! jq '.' /tmp/bootstrap.json >/dev/null 2>&1; then
            echo "ERROR: jq cannot parse /tmp/bootstrap.json"
            echo "--- cleaned text ---"
            sed -n '1,200p' /tmp/bootstrap.json || true
            exit 1
          fi

      - name: Export bootstrap outputs as env (robust)
        if: ${{ env.TF_BUCKET == '' }}
        working-directory: infra/terraform/bootstrap/gcp
        shell: bash
        run: |
          set -euo pipefail

          if [ ! -s /tmp/bootstrap.json ]; then
            echo "ERROR: /tmp/bootstrap.json missing or empty"
            ls -l /tmp || true
            exit 1
          fi

          FILTER='
          (.state_bucket.value //
           .state_bucket_name.value //
           .state_bucket //
           .state_bucket_name //
           empty)
          '

          TF_BUCKET="$(jq -r "$FILTER" /tmp/bootstrap.json || true)"

          if [ -z "$TF_BUCKET" ]; then
            echo "ERROR: could not determine TF_BUCKET from outputs."
            echo "Expected outputs: state_bucket or state_bucket_name."
            echo "Available keys are:"
            jq -r 'keys[]' /tmp/bootstrap.json || true
            exit 6
          fi

          echo "TF_BUCKET=$TF_BUCKET" >> "$GITHUB_ENV"
          echo "Exported TF_BUCKET=$TF_BUCKET"

      - name: Write backend.hcl for GCP infra
        env:
          ENV_NAME: ${{ github.event.inputs.environment }}
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p infra/terraform/gcp
          env_name="${ENV_NAME:-prod}"
          {
            printf 'bucket = "%s"\n' "$TF_BUCKET"
            printf 'prefix = "%s"\n' "env/${env_name}"
          } > infra/terraform/gcp/backend.hcl
          echo "backend.hcl:"
          sed -n '1,120p' infra/terraform/gcp/backend.hcl

      - name: Terraform init (gcp infra)
        working-directory: infra/terraform/gcp
        shell: bash
        run: |
          set -euo pipefail
          terraform init -backend-config=backend.hcl \
            -reconfigure -input=false

      - name: Terraform apply (gcp infra)
        working-directory: infra/terraform/gcp
        shell: bash
        run: |
          set -euo pipefail
          terraform apply -auto-approve -input=false

      - name: Output results (JSON)
        if: success()
        working-directory: infra/terraform/gcp
        shell: bash
        run: |
          set -euo pipefail
          terraform output -json || true

      - name: Done
        shell: bash
        run: echo "Deploy GCP finished."
