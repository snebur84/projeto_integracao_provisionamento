---
name: Deploy - GCP

on:
  workflow_dispatch:
    inputs:
      environment:
        description: >
          Target environment (ex.: prod, staging, dev)
        required: false
        default: prod
  push:
    branches:
      - main
    paths:
      - infra/terraform/**
      - .github/workflows/deploy-gcp.yml

permissions:
  contents: read
  id-token: write

concurrency:
  group: deploy-gcp-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    name: Deploy to GCP
    runs-on: ubuntu-latest
    env:
      TF_IN_AUTOMATION: "true"
      # Use APENAS VariÃ¡veis (Settings > Variables) para WIF
      GCP_WIF_PROVIDER: ${{ vars.GCP_WIF_PROVIDER }}
      GCP_SA_EMAIL: ${{ vars.GCP_SA_EMAIL }}
      GCP_PROJECT: ${{ vars.GCP_PROJECT }}
      GCP_REGION: ${{ vars.GCP_REGION }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validate required vars for WIF
        shell: bash
        run: |
          set -euo pipefail
          err=0
          [ -z "${GCP_WIF_PROVIDER:-}" ] && err=1
          [ -z "${GCP_SA_EMAIL:-}" ] && err=1
          [ -z "${GCP_PROJECT:-}" ] && err=1
          if [ "$err" -ne 0 ]; then
            echo "Missing required repository variables:"
            echo " - GCP_WIF_PROVIDER"
            echo " - GCP_SA_EMAIL"
            echo " - GCP_PROJECT"
            echo "Configure them in Settings > Variables."
            exit 1
          fi
          if [ -z "${GCP_REGION:-}" ]; then
            echo "GCP_REGION not set. Defaulting to us-central1."
            echo "GCP_REGION=us-central1" >> "$GITHUB_ENV"
          fi

      - name: Auth via Workload Identity Federation
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ env.GCP_WIF_PROVIDER }}
          service_account: ${{ env.GCP_SA_EMAIL }}
          token_format: access_token

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.GCP_PROJECT }}
          export_default_credentials: true

      - name: Verify gcloud auth
        shell: bash
        run: |
          set -euo pipefail
          gcloud auth list --filter=status:ACTIVE
          gcloud config list

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      - name: Bootstrap - write tfvars
        working-directory: infra/terraform/bootstrap/gcp
        env:
          ENV_NAME: ${{ github.event.inputs.environment }}
        shell: bash
        run: |
          set -euo pipefail
          env_name="${ENV_NAME:-prod}"
          project="${GCP_PROJECT}"
          region="${GCP_REGION}"

          bucket="${project}-tfstate-${env_name}"
          bucket="$(printf '%s' "$bucket" \
            | tr '[:upper:]' '[:lower:]' \
            | sed 's/[^a-z0-9-]/-/g' \
            | cut -c1-63)"

          {
            printf 'project = "%s"\n' "$project"
            printf 'region = "%s"\n' "$region"
            printf 'state_bucket_name = "%s"\n' "$bucket"
          } > terraform.tfvars

          echo "Wrote terraform.tfvars:"
          sed -n '1,120p' terraform.tfvars

      - name: Bootstrap - init and apply
        working-directory: infra/terraform/bootstrap/gcp
        shell: bash
        run: |
          set -euo pipefail
          terraform init -input=false
          terraform apply -auto-approve -input=false

      - name: Determine TF_BUCKET (secret > output > tfvars)
        working-directory: infra/terraform/bootstrap/gcp
        env:
          TF_BUCKET_SECRET: ${{ secrets.TF_BUCKET }}
        shell: bash
        run: |
          set -euo pipefail
          TF_BUCKET=""

          if [ -n "${TF_BUCKET_SECRET:-}" ]; then
            TF_BUCKET="${TF_BUCKET_SECRET}"
            echo "Using TF_BUCKET from secret."
          fi

          if [ -z "$TF_BUCKET" ]; then
            TF_BUCKET="$(terraform output -raw state_bucket \
              2>/dev/null || true)"
          fi
          if [ -z "$TF_BUCKET" ]; then
            TF_BUCKET="$(terraform output -raw state_bucket_name \
              2>/dev/null || true)"
          fi

          if [ -z "$TF_BUCKET" ] && [ -f terraform.tfvars ]; then
            TF_BUCKET="$(
              awk -F '\"' '/state_bucket_name/ {print $2; exit}' \
                terraform.tfvars || true
            )"
          fi

          if [ -z "$TF_BUCKET" ]; then
            echo "ERROR: could not determine TF_BUCKET."
            echo "Provide secret TF_BUCKET or ensure bootstrap"
            echo "outputs 'state_bucket'/'state_bucket_name'."
            exit 6
          fi

          echo "TF_BUCKET=${TF_BUCKET}" >> "$GITHUB_ENV"
          echo "Resolved TF_BUCKET=${TF_BUCKET}"

      - name: Write backend.hcl for GCP infra
        env:
          ENV_NAME: ${{ github.event.inputs.environment }}
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p infra/terraform/gcp
          env_name="${ENV_NAME:-prod}"
          {
            printf 'bucket = "%s"\n' "$TF_BUCKET"
            printf 'prefix = "%s"\n' "env/${env_name}"
          } > infra/terraform/gcp/backend.hcl
          echo "backend.hcl:"
          sed -n '1,120p' infra/terraform/gcp/backend.hcl

      - name: Terraform init (gcp infra)
        working-directory: infra/terraform/gcp
        shell: bash
        run: |
          set -euo pipefail
          terraform init -backend-config=backend.hcl \
            -reconfigure -input=false

      - name: Terraform apply (gcp infra)
        working-directory: infra/terraform/gcp
        shell: bash
        run: |
          set -euo pipefail
          terraform apply -auto-approve -input=false

      - name: Output results (JSON)
        if: success()
        working-directory: infra/terraform/gcp
        shell: bash
        run: |
          set -euo pipefail
          terraform output -json || true

      - name: Done
        shell: bash
        run: echo "Deploy GCP finished."
