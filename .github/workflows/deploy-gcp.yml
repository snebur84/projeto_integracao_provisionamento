---
name: Deploy GCP infra

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy (e.g., prod, staging)'
        required: true
        default: 'prod'
      bootstrap:
        description: 'Run bootstrap apply (creates bootstrap resources)'
        required: false
        default: 'false'

jobs:
  deploy-gcp:
    runs-on: ubuntu-latest
    env:
      TF_IN_AUTOMATION: true

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Authenticate to GCP
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          export_environment_variables: true

      - name: Setup gcloud and gsutil
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT }}
          # optional: install components if you need them
          install_components: gsutil

      - name: Validate required inputs
        run: |
          set -euo pipefail
          if [ -z "${{ secrets.GCP_PROJECT }}" ]; then
            echo "ERROR: missing secret GCP_PROJECT"
            exit 1
          fi

      - name: Setup Terraform CLI
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.5.7'

      - name: Optional: run bootstrap apply (only if requested)
        if: ${{ github.event.inputs.bootstrap == 'true' }}
        working-directory: infra/terraform/bootstrap/gcp
        env:
          ENV_NAME: ${{ github.event.inputs.environment }}
          GCP_PROJECT: ${{ secrets.GCP_PROJECT }}
          GCP_REGION: ${{ secrets.GCP_REGION }}
        run: |
          set -euo pipefail

          env="${ENV_NAME:-prod}"
          project="${GCP_PROJECT}"
          region="${GCP_REGION:-us-central1}"

          bucket="${project}-tfstate-${env}"
          bucket=$(printf '%s' "$bucket" \
            | tr '[:upper:]' '[:lower:]' \
            | sed 's/[^a-z0-9-]/-/g' \
            | cut -c1-63)

          printf 'project = "%s"\n' "$project" > terraform.tfvars
          printf 'region = "%s"\n' "$region" >> terraform.tfvars
          printf 'state_bucket_name = "%s"\n' "$bucket" >> terraform.tfvars

          echo "Running bootstrap terraform init/apply (non-interactive)"
          terraform init -input=false
          terraform apply -auto-approve -input=false

      - name: Ensure GCS backend bucket exists and export TF_BUCKET
        working-directory: infra/terraform/bootstrap/gcp
        env:
          ENV_NAME: ${{ github.event.inputs.environment }}
          GCP_PROJECT: ${{ secrets.GCP_PROJECT }}
          GCP_REGION: ${{ secrets.GCP_REGION }}
        run: |
          set -euo pipefail

          env="${ENV_NAME:-prod}"
          project="${GCP_PROJECT}"
          region="${GCP_REGION:-us-central1}"

          bucket="${project}-tfstate-${env}"
          bucket=$(printf '%s' "$bucket" \
            | tr '[:upper:]' '[:lower:]' \
            | sed 's/[^a-z0-9-]/-/g' \
            | cut -c1-63)

          echo "Using bucket name: ${bucket}"

          if gsutil ls -b "gs://${bucket}" >/dev/null 2>&1; then
            echo "Bucket gs://${bucket} already exists"
          else
            echo "Bucket gs://${bucket} not found; attempting to create in project ${project}"
            if gsutil mb -p "${project}" -l "${region}" "gs://${bucket}"; then
              echo "Created bucket gs://${bucket}"
            else
              echo "ERROR: Failed to create gs://${bucket}"
              echo "Ensure the service account has storage.buckets.create permission"
              exit 1
            fi
          fi

          echo "TF_BUCKET=${bucket}" >> $GITHUB_ENV
          echo "Exported TF_BUCKET=${bucket}"

      - name: Write backend.hcl for infra (gcp)
        env:
          TF_BUCKET: ${{ env.TF_BUCKET }}
          ENV_NAME: ${{ github.event.inputs.environment }}
        run: |
          set -euo pipefail

          if [ -z "${TF_BUCKET:-}" ]; then
            echo "ERROR: TF_BUCKET not set"
            exit 1
          fi

          mkdir -p infra/terraform/gcp
          env="${ENV_NAME:-prod}"
          printf 'bucket = "%s"\n' "${TF_BUCKET}" > infra/terraform/gcp/backend.hcl
          printf 'prefix = "%s"\n' "env/${env}" >> infra/terraform/gcp/backend.hcl
          echo "Wrote infra backend.hcl (preview):"
          sed -n '1,120p' infra/terraform/gcp/backend.hcl || true

      - name: Write terraform.tfvars for infra (gcp)
        working-directory: infra/terraform/gcp
        env:
          GCP_PROJECT: ${{ secrets.GCP_PROJECT }}
          GCP_REGION: ${{ secrets.GCP_REGION }}
          GCP_ZONE: ${{ secrets.GCP_ZONE }}
          ENV_NAME: ${{ github.event.inputs.environment }}
          TF_BUCKET: ${{ env.TF_BUCKET }}
        run: |
          set -euo pipefail

          project="${GCP_PROJECT}"
          region="${GCP_REGION:-us-central1}"
          zone="${GCP_ZONE:-us-central1-a}"
          env="${ENV_NAME:-prod}"
          bucket="${TF_BUCKET:-}"

          printf 'gcp_project = "%s"\n' "$project" > terraform.tfvars
          printf 'gcp_region  = "%s"\n' "$region" >> terraform.tfvars
          printf 'gcp_zone    = "%s"\n' "$zone" >> terraform.tfvars
          printf 'environment = "%s"\n' "$env" >> terraform.tfvars

          if [ -n "$bucket" ]; then
            printf 'state_bucket_name = "%s"\n' "$bucket" >> terraform.tfvars || true
            printf 'state_bucket = "%s"\n' "$bucket" >> terraform.tfvars || true
          fi

          echo "Wrote terraform.tfvars (preview):"
          sed -n '1,120p' terraform.tfvars || true

      - name: Terraform init (gcp infra)
        working-directory: infra/terraform/gcp
        run: |
          set -euo pipefail
          terraform init -backend-config=backend.hcl -reconfigure -input=false

      - name: Import existing GCP resources (idempotent)
        working-directory: infra/terraform/gcp
        env:
          GCP_PROJECT: ${{ secrets.GCP_PROJECT }}
          GCP_REGION: ${{ secrets.GCP_REGION }}
          ENV_NAME: ${{ github.event.inputs.environment }}
        run: |
          set -euo pipefail

          TFVARS_FILE=terraform.tfvars
          instance_name="provision-instance"
          environment="${ENV_NAME:-prod}"

          if [ -f "$TFVARS_FILE" ]; then
            parsed_inst=$(awk -F= '/^instance_name[[:space:]]*=/{gsub(/[ "\"\047]/,"",$2); print $2; exit}' "$TFVARS_FILE" || true)
            parsed_env=$(awk -F= '/^environment[[:space:]]*=/{gsub(/[ "\"\047]/,"",$2); print $2; exit}' "$TFVARS_FILE" || true)
            [ -n "$parsed_inst" ] && instance_name="$parsed_inst"
            [ -n "$parsed_env" ] && environment="$parsed_env"
          fi

          address_name="${instance_name}-ip"
          firewall_name="allow-http-https-${environment}"

          echo "Import step: instance_name=${instance_name}, environment=${environment}"
          echo "Attempting idempotent import of address='${address_name}' and firewall='${firewall_name}'"

          import_if_missing() {
            local tf_addr="$1"
            local check_cmd="$2"
            local import_id="$3"

            if terraform state list 2>/dev/null | grep -q "^${tf_addr}$"; then
              echo "Skipping import: ${tf_addr} already present in state"
              return 0
            fi

            if eval "${check_cmd}"; then
              echo "Found existing GCP resource for ${tf_addr}; attempting terraform import..."
              if terraform import -no-color "${tf_addr}" "${import_id}"; then
                echo "Imported ${tf_addr} -> ${import_id}"
                return 0
              else
                echo "Warning: terraform import for ${tf_addr} failed (continuing)."
                return 1
              fi
            else
              echo "No existing GCP resource found for ${tf_addr} (it will be created by apply)"
              return 0
            fi
          }

          import_if_missing \
            "google_compute_address.provision_ip" \
            "gcloud compute addresses describe '${address_name}' --region='${GCP_REGION}' --project='${GCP_PROJECT}' >/dev/null 2>&1" \
            "projects/${GCP_PROJECT}/regions/${GCP_REGION}/addresses/${address_name}" || true

          import_if_missing \
            "google_compute_firewall.allow_http_https" \
            "gcloud compute firewall-rules describe '${firewall_name}' --project='${GCP_PROJECT}' >/dev/null 2>&1" \
            "projects/${GCP_PROJECT}/global/firewalls/${firewall_name}" || true

          echo "Import step completed."

      - name: Terraform apply (gcp infra)
        working-directory: infra/terraform/gcp
        run: |
          set -euo pipefail
          terraform apply -var-file=terraform.tfvars -auto-approve -input=false

      - name: Output infra results
        if: success()
        working-directory: infra/terraform/gcp
        run: terraform output -json
