---
name: Deploy GCP infra

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy (prod, staging)'
        required: true
        default: prod
      bootstrap:
        description: 'Run bootstrap apply'
        required: false
        default: 'false'

jobs:
  deploy-gcp:
    runs-on: ubuntu-latest
    env:
      TF_IN_AUTOMATION: true

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Authenticate to GCP
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          export_environment_variables: true

      - name: Setup gcloud and gsutil
        uses: google-github-actions/setup-gcloud@v1
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ secrets.GCP_PROJECT }}

      - name: Validate required GCP inputs
        run: |
          set -euo pipefail
          if [ -z "${{ secrets.GCP_PROJECT }}" ]; then
            echo "ERROR: missing secret GCP_PROJECT"
            exit 1
          fi

      - name: Setup Terraform CLI
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.5.7'

      - name: Optional bootstrap apply
        if: ${{ github.event.inputs.bootstrap == 'true' }}
        working-directory: infra/terraform/bootstrap/gcp
        env:
          ENV_NAME: ${{ github.event.inputs.environment }}
          GCP_PROJECT: ${{ secrets.GCP_PROJECT }}
          GCP_REGION: ${{ secrets.GCP_REGION }}
        run: |
          set -euo pipefail

          env="${ENV_NAME:-prod}"
          project="${GCP_PROJECT}"
          region="${GCP_REGION:-us-central1}"

          bucket="${project}-tfstate-${env}"
          bucket=$(printf '%s' "$bucket" \
            | tr '[:upper:]' '[:lower:]' \
            | sed 's/[^a-z0-9-]/-/g' \
            | cut -c1-63)

          printf 'project = "%s"\n' "$project" > terraform.tfvars
          printf 'region = "%s"\n' "$region" >> terraform.tfvars
          printf 'state_bucket_name = "%s"\n' "$bucket" >> terraform.tfvars

          terraform init -input=false
          terraform apply -auto-approve -input=false

      - name: Ensure GCS backend bucket exists and export TF_BUCKET
        working-directory: infra/terraform/bootstrap/gcp
        env:
          ENV_NAME: ${{ github.event.inputs.environment }}
          GCP_PROJECT: ${{ secrets.GCP_PROJECT }}
          GCP_REGION: ${{ secrets.GCP_REGION }}
        run: |
          set -euo pipefail

          env="${ENV_NAME:-prod}"
          project="${GCP_PROJECT}"
          region="${GCP_REGION:-us-central1}"

          bucket="${project}-tfstate-${env}"
          bucket=$(printf '%s' "$bucket" \
            | tr '[:upper:]' '[:lower:]' \
            | sed 's/[^a-z0-9-]/-/g' \
            | cut -c1-63)

          echo "Using bucket: ${bucket}"

          if gsutil ls -b "gs://${bucket}" >/dev/null 2>&1; then
            echo "Bucket exists: gs://${bucket}"
          else
            echo "Creating bucket: gs://${bucket}"
            if ! gsutil mb -p "${project}" -l "${region}" "gs://${bucket}"; then
              echo "ERROR: failed to create gs://${bucket}"
              exit 1
            fi
          fi

          echo "TF_BUCKET=${bucket}" >> $GITHUB_ENV
          echo "Exported TF_BUCKET=${bucket}"

      - name: Write backend.hcl for infra
        env:
          TF_BUCKET: ${{ env.TF_BUCKET }}
          ENV_NAME: ${{ github.event.inputs.environment }}
        run: |
          set -euo pipefail

          if [ -z "${TF_BUCKET:-}" ]; then
            echo "ERROR: TF_BUCKET not set"
            exit 1
          fi

          mkdir -p infra/terraform/gcp
          env="${ENV_NAME:-prod}"
          printf 'bucket = "%s"\n' "${TF_BUCKET}" > infra/terraform/gcp/backend.hcl
          printf 'prefix = "%s"\n' "env/${env}" >> infra/terraform/gcp/backend.hcl
          sed -n '1,120p' infra/terraform/gcp/backend.hcl

      - name: Terraform init (gcp infra)
        working-directory: infra/terraform/gcp
        run: |
          set -euo pipefail
          terraform init \
            -backend-config=backend.hcl \
            -reconfigure -input=false

      - name: Terraform apply (gcp infra)
        working-directory: infra/terraform/gcp
        run: |
          set -euo pipefail
          terraform apply -auto-approve -input=false

      - name: Output infra results
        if: success()
        working-directory: infra/terraform/gcp
        run: terraform output -json
