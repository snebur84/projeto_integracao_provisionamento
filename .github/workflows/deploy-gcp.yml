---
name: Deploy GCP infra

on:
  workflow_dispatch:
    inputs:
      environment:
        required: true
        default: prod

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Check required GCP secrets
        run: |
          set -euo pipefail
          if [ -z "${{ secrets.GCP_SA_KEY }}" ]; then
            echo "ERROR: missing secret GCP_SA_KEY"
            exit 1
          fi
          if [ -z "${{ secrets.GCP_PROJECT }}" ]; then
            echo "ERROR: missing secret GCP_PROJECT"
            exit 1
          fi

  deploy-gcp:
    runs-on: ubuntu-latest
    needs: validate
    env:
      TF_IN_AUTOMATION: true

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: List bootstrap directory (debug)
        run: |
          echo "Listing infra/terraform/bootstrap/gcp (if present)"
          ls -la infra/terraform/bootstrap/gcp || true

      - name: Authenticate to GCP
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      - name: Bootstrap - write tfvars
        working-directory: infra/terraform/bootstrap/gcp
        env:
          ENV_NAME: ${{ github.event.inputs.environment }}
          GCP_REGION: ${{ secrets.GCP_REGION }}
          GCP_PROJECT: ${{ secrets.GCP_PROJECT }}
        run: |
          set -euo pipefail

          # values
          env="${ENV_NAME:-prod}"
          project="${GCP_PROJECT}"
          region="${GCP_REGION:-us-central1}"

          # build a valid GCS bucket name: lowercase, replace invalid chars, keep reasonable length
          # example: <project>-tfstate-<env>
          bucket="${project}-tfstate-${env}"
          # sanitize: lowercase and replace any non alnum or '-' with '-'
          bucket="$(echo "$bucket" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9-]/-/g')"
          # ensure bucket name length <= 63
          bucket="$(echo "$bucket" | cut -c1-63)"

          printf 'project = "%s"\n' "$project" > terraform.tfvars
          printf 'region = "%s"\n' "$region" >> terraform.tfvars
          printf 'state_bucket_name = "%s"\n' "$bucket" >> terraform.tfvars

          echo "Wrote terraform.tfvars:"
          sed -n '1,120p' terraform.tfvars

      - name: Bootstrap - init and apply
        working-directory: infra/terraform/bootstrap/gcp
        run: |
          set -euo pipefail
          terraform init -input=false
          terraform apply -auto-approve -input=false

      - name: Get bootstrap outputs - save JSON
        working-directory: infra/terraform/bootstrap/gcp
        id: bootstrap
        run: |
          set -euo pipefail
          terraform output -json > /tmp/bootstrap.json

      - name: Export bootstrap outputs as env
        working-directory: infra/terraform/bootstrap/gcp
        id: bootstrap
        run: |
          set -euo pipefail

          BOOT="/tmp/bootstrap.json"

          # Verifica existência e conteúdo
          if [ ! -f "${BOOT}" ]; then
            echo "ERROR: ${BOOT} not found. Previous step 'terraform output -json' may have failed."
            ls -la /tmp || true
            exit 5
          fi

          if [ ! -s "${BOOT}" ]; then
            echo "ERROR: ${BOOT} is empty."
            echo "Contents (if any):"
            sed -n '1,200p' "${BOOT}" || true
            exit 5
          fi

          # Valida JSON
          if ! jq -e . "${BOOT}" >/dev/null 2>&1; then
            echo "ERROR: ${BOOT} is not valid JSON. Dumping contents for debug:"
            sed -n '1,200p' "${BOOT}" || true
            exit 5
          fi

          # Tenta extrair o nome do bucket a partir de várias formas possíveis de outputs
          TF_BUCKET=$(jq -r '(.state_bucket.value // .state_bucket_name.value // .state_bucket // .state_bucket_name // .state_bucket_name_value // empty)' "${BOOT}")

          if [ -z "${TF_BUCKET}" ]; then
            echo "ERROR: Não foi possível encontrar o nome do bucket nos outputs."
            echo "Chaves presentes no JSON:"
            jq -r 'keys[]' "${BOOT}" || true
            echo "Conteúdo completo para debug:"
            sed -n '1,400p' "${BOOT}" || true
            exit 6
          fi

          echo "TF_BUCKET=${TF_BUCKET}" >> $GITHUB_ENV
          echo "Exported TF_BUCKET=${TF_BUCKET}"

      - name: Write backend.hcl for GCP infra
        env:
          TF_BUCKET: ${{ env.TF_BUCKET }}
          ENV_NAME: ${{ github.event.inputs.environment }}
        run: |
          set -euo pipefail
          mkdir -p infra/terraform/gcp
          env="${ENV_NAME:-prod}"
          printf 'bucket = "%s"\n' "$TF_BUCKET" \
            > infra/terraform/gcp/backend.hcl
          printf 'prefix = "%s"\n' "env/${env}" \
            >> infra/terraform/gcp/backend.hcl
          sed -n '1,120p' infra/terraform/gcp/backend.hcl

      - name: Terraform init (gcp infra)
        working-directory: infra/terraform/gcp
        run: |
          set -euo pipefail
          terraform init -backend-config=backend.hcl -reconfigure -input=false

      - name: Terraform apply (gcp infra)
        working-directory: infra/terraform/gcp
        run: |
          set -euo pipefail
          terraform apply -auto-approve -input=false

      - name: Output results
        if: success()
        working-directory: infra/terraform/gcp
        run: terraform output -json
