---
name: Deploy - GCP

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Target environment (ex.: prod, staging, dev)"
        required: false
        default: "prod"
  push:
    branches: ["main"]
    paths:
      - "infra/terraform/**"
      - ".github/workflows/deploy-gcp.yml"

permissions:
  contents: read
  id-token: write

concurrency:
  group: deploy-gcp-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    name: Deploy to GCP
    runs-on: ubuntu-latest
    env:
      TF_IN_AUTOMATION: "true"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Prefer Workload Identity Federation
      - name: Auth to GCP via Workload Identity Federation
        if: ${{ secrets.GCP_WIF_PROVIDER != '' && secrets.GCP_SA_EMAIL != '' }}
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account: ${{ secrets.GCP_SA_EMAIL }}
          token_format: access_token

      # Fallback to Service Account Key if necessary
      - name: Auth to GCP via Service Account Key
        if: ${{ !(secrets.GCP_WIF_PROVIDER != '' && secrets.GCP_SA_EMAIL != '') && secrets.GCP_SA_KEY != '' }}
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT }}
          export_default_credentials: true

      - name: Verify gcloud auth
        run: |
          set -euo pipefail
          gcloud auth list --filter=status:ACTIVE
          gcloud config list

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      - name: Bootstrap - write tfvars
        working-directory: infra/terraform/bootstrap/gcp
        env:
          ENV_NAME: ${{ github.event.inputs.environment }}
          GCP_REGION: ${{ secrets.GCP_REGION }}
          GCP_PROJECT: ${{ secrets.GCP_PROJECT }}
        run: |
          set -euo pipefail
          env="${ENV_NAME:-prod}"
          project="${GCP_PROJECT}"
          region="${GCP_REGION:-us-central1}"

          bucket="${project}-tfstate-${env}"
          bucket=$(printf '%s' "$bucket" | tr '[:upper:]' '[:lower:]' \
            | sed 's/[^a-z0-9-]/-/g' | cut -c1-63)

          printf 'project = "%s"\n' "$project" > terraform.tfvars
          printf 'region = "%s"\n' "$region" >> terraform.tfvars
          printf 'state_bucket_name = "%s"\n' "$bucket" >> terraform.tfvars

          echo "Wrote terraform.tfvars:"
          sed -n '1,120p' terraform.tfvars

      - name: Import existing state bucket if present
        working-directory: infra/terraform/bootstrap/gcp
        run: |
          set -euo pipefail
          if [ ! -f terraform.tfvars ]; then
            echo "terraform.tfvars not found; skipping import check"
            exit 0
          fi

          BUCKET=$(awk -F'"' '/state_bucket_name/ {print $2; exit}' terraform.tfvars || true)
          if [ -z "$BUCKET" ]; then
            echo "state_bucket_name not found in terraform.tfvars; skipping import"
            exit 0
          fi

          echo "Checking if bucket gs://$BUCKET exists..."
          if gsutil ls -b "gs://$BUCKET" >/dev/null 2>&1; then
            echo "Bucket exists — ensuring Terraform state knows about it."
            terraform init -input=false

            if terraform state list | grep -q '^google_storage_bucket\.terraform_state$'; then
              echo "google_storage_bucket.terraform_state already in state; skipping import."
            else
              terraform import -lock=false 'google_storage_bucket.terraform_state' "$BUCKET" || {
                echo "terraform import failed"
                terraform state list || true
                exit 1
              }
            fi
          else
            echo "Bucket does not exist — Terraform will create it."
          fi

      - name: Bootstrap - init and apply
        working-directory: infra/terraform/bootstrap/gcp
        run: |
          set -euo pipefail
          terraform init -input=false
          terraform apply -auto-approve -input=false

      - name: Get bootstrap outputs and export TF_BUCKET
        working-directory: infra/terraform/bootstrap/gcp
        run: |
          set -euo pipefail

          TF_BUCKET=""
          # 1) Try terraform output -raw (preferred)
          if terraform output -help 2>/dev/null | grep -q '\-raw'; then
            TF_BUCKET=$(terraform output -raw state_bucket 2>/dev/null || true)
            if [ -z "$TF_BUCKET" ]; then
              TF_BUCKET=$(terraform output -raw state_bucket_name 2>/dev/null || true)
            fi
          fi

          # 2) Fallback: use -json but strip ANSI/control chars and extract with jq
          if [ -z "$TF_BUCKET" ]; then
            terraform output -json -no-color > /tmp/terraform_output.json 2>/tmp/terraform_output.err || true
            sed -r 's/\x1b\[[0-9;]*[mK]//g' /tmp/terraform_output.json > /tmp/terraform_output.clean.json || true

            if jq -e . /tmp/terraform_output.clean.json >/dev/null 2>&1; then
              echo "Outputs keys available:"
              jq -r 'keys[]' /tmp/terraform_output.clean.json || true
              TF_BUCKET=$(jq -r '(.state_bucket.value // .state_bucket_name.value // .state_bucket // .state_bucket_name // empty)' /tmp/terraform_output.clean.json || true)
            else
              echo "ERROR: terraform output -json produced invalid JSON. Dumping stderr:"
              sed -n '1,200p' /tmp/terraform_output.err || true
            fi

            rm -f /tmp/terraform_output.json /tmp/terraform_output.clean.json /tmp/terraform_output.err || true
          fi

          if [ -z "$TF_BUCKET" ]; then
            echo "ERROR: could not determine TF_BUCKET from bootstrap outputs."
            echo "Make sure the bootstrap module defines output 'state_bucket' or 'state_bucket_name'."
            exit 6
          fi

          echo "TF_BUCKET=$TF_BUCKET" >> $GITHUB_ENV
          echo "Exported TF_BUCKET=$TF_BUCKET"

      - name: Write backend.hcl for GCP infra
        env:
          TF_BUCKET: ${{ env.TF_BUCKET }}
          ENV_NAME: ${{ github.event.inputs.environment }}
        run: |
          set -euo pipefail
          mkdir -p infra/terraform/gcp
          env="${ENV_NAME:-prod}"
          printf 'bucket = "%s"\n' "$TF_BUCKET" > infra/terraform/gcp/backend.hcl
          printf 'prefix = "%s"\n' "env/${env}" >> infra/terraform/gcp/backend.hcl
          sed -n '1,120p' infra/terraform/gcp/backend.hcl

      - name: Terraform init (gcp infra)
        working-directory: infra/terraform/gcp
        run: |
          set -euo pipefail
          terraform init -backend-config=backend.hcl \
            -reconfigure -input=false

      - name: Terraform apply (gcp infra)
        working-directory: infra/terraform/gcp
        run: |
          set -euo pipefail
          terraform apply -auto-approve -input=false

      - name: Output results
        if: success()
        working-directory: infra/terraform/gcp
        run: terraform output -json
