---
# Workflow: Terraform deploy GCP (usando Workload Identity)
# Correções aplicadas:
# - adicionado cabeçalho YAML '---'
# - valores booleanos em YAML são true/false (sem aspas)
# - linhas longas quebradas ou substituídas por referências a vars
# - removido uso de service_account_key no setup-gcloud
# - uso de google-github-actions/auth@v1 com variável do repositório que guarda
#   a string do provider (vars.GCP_WIF_PROVIDER) para manter linhas curtas
on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment (ex: prod)"
        required: true
        default: prod
      create_instance:
        description: "Create instance (true/false)"
        required: false
        default: true
      script_path:
        description: "Path to provisioning script in repo"
        required: false
        default: scripts/provision_ubuntu_full.sh
      presign_ttl:
        description: "Signed URL TTL in seconds"
        required: false
        default: "86400"
      instance_type:
        description: "GCP machine type (ex: e2-micro)"
        required: false
        default: e2-micro

name: Terraform deploy GCP

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      # Segure GCP_PROJECT em secrets, mantenha as outras vars no repo
      GCP_PROJECT: ${{ secrets.GCP_PROJECT }}
      GCP_REGION: ${{ secrets.GCP_REGION }}
      GCP_ZONE: ${{ secrets.GCP_ZONE }}
      GCP_WIF_PROVIDER: ${{ vars.GCP_WIF_PROVIDER }}
      GCP_SA_EMAIL: ${{ vars.GCP_SA_EMAIL }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Authenticate to GCP (Workload Identity)
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: ${{ env.GCP_WIF_PROVIDER }}
          service_account: ${{ env.GCP_SA_EMAIL }}

      - name: Install gcloud SDK (optional)
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT }}

      - name: Verify auth
        run: |
          set -euo pipefail
          echo "gcloud auth list:"
          gcloud auth list
          echo "gcloud config list:"
          gcloud config list
        env:
          CLOUDSDK_PYTHON: python3

      - name: Ensure terraform installed
        run: |
          set -euo pipefail
          TERRAFORM_VERSION="${TERRAFORM_VERSION:-1.5.7}"
          ZIP="terraform_${TERRAFORM_VERSION}_linux_amd64.zip"
          curl -fsSLo "${ZIP}" \
            "https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/${ZIP}"
          unzip -q "${ZIP}"
          sudo mv terraform /usr/local/bin/terraform
          sudo chmod +x /usr/local/bin/terraform
          rm -f "${ZIP}"
          terraform version

      - name: Bootstrap GCS backend (create bucket if missing)
        id: bootstrap
        run: |
          set -euo pipefail
          ENV="${{ github.event.inputs.environment }}"
          BUCKET="provisionbucket-${ENV}-gcp"
          REGION="${GCP_REGION:-us-central1}"
          if gsutil ls -b "gs://${BUCKET}" >/dev/null 2>&1; then
            echo "Bucket exists: ${BUCKET}"
          else
            echo "Creating bucket ${BUCKET} in ${REGION}"
            gsutil mb -p "${GCP_PROJECT}" -l "${REGION}" \
              "gs://${BUCKET}"
            gsutil versioning set on "gs://${BUCKET}"
          fi
          echo "bucket=${BUCKET}" >> "$GITHUB_OUTPUT"
          echo "region=${REGION}" >> "$GITHUB_OUTPUT"

      - name: Upload script and create signed URL
        id: presign
        run: |
          set -euo pipefail
          BUCKET="${{ steps.bootstrap.outputs.bucket }}"
          SCRIPT="${{ github.event.inputs.script_path }}"
          DEST="provision.sh"
          gsutil cp "${SCRIPT}" "gs://${BUCKET}/${DEST}"
          KEYFILE="${HOME}/gcloud-service-key.json"
          chmod 600 "${KEYFILE}" || true
          TTL="${{ github.event.inputs.presign_ttl }}"
          SIGNED_URL=$(gsutil signurl -d "${TTL}s" "${KEYFILE}" \
            "gs://${BUCKET}/${DEST}" | tail -n 1 | awk '{print $NF}')
          echo "presigned_url=${SIGNED_URL}" >> "$GITHUB_OUTPUT"
          echo "uploaded=gs://${BUCKET}/${DEST}" >> "$GITHUB_OUTPUT"

      - name: Write backend.hcl for Terraform
        run: |
          set -euo pipefail
          mkdir -p infra/terraform/gcp
          printf 'bucket = "%s"\n' "${{ steps.bootstrap.outputs.bucket }}" \
            > infra/terraform/gcp/backend.hcl
          printf 'prefix = "%s/terraform.tfstate"\n' \
            "${{ github.event.inputs.environment }}" >> \
            infra/terraform/gcp/backend.hcl
          printf 'project = "%s"\n' "${{ secrets.GCP_PROJECT }}" >> \
            infra/terraform/gcp/backend.hcl
          echo "Wrote infra/terraform/gcp/backend.hcl"

      - name: Terraform init & plan
        working-directory: infra/terraform/gcp
        env:
          GOOGLE_APPLICATION_CREDENTIALS: "${HOME}/gcloud-service-key.json"
          TF_VAR_presigned_url: ${{ steps.presign.outputs.presigned_url }}
          TF_VAR_gcp_project: ${{ secrets.GCP_PROJECT }}
          TF_VAR_gcp_region: ${{ secrets.GCP_REGION }}
          TF_VAR_gcp_zone: ${{ secrets.GCP_ZONE }}
          TF_VAR_create_instance: ${{ github.event.inputs.create_instance }}
          TF_VAR_machine_type: ${{ github.event.inputs.instance_type }}
        run: |
          set -euo pipefail
          terraform init -backend-config=backend.hcl -reconfigure
          terraform validate
          terraform plan -out=tfplan -input=false

      - name: Terraform apply
        working-directory: infra/terraform/gcp
        env:
          GOOGLE_APPLICATION_CREDENTIALS: "${HOME}/gcloud-service-key.json"
          TF_VAR_presigned_url: ${{ steps.presign.outputs.presigned_url }}
          TF_VAR_gcp_project: ${{ secrets.GCP_PROJECT }}
          TF_VAR_gcp_region: ${{ secrets.GCP_REGION }}
          TF_VAR_gcp_zone: ${{ secrets.GCP_ZONE }}
          TF_VAR_create_instance: ${{ github.event.inputs.create_instance }}
          TF_VAR_machine_type: ${{ github.event.inputs.instance_type }}
        run: |
          set -euo pipefail
          terraform apply -input=false -auto-approve tfplan

      - name: Print results
        run: |
          echo "bucket=${{ steps.bootstrap.outputs.bucket }}"
          echo "presigned_url=${{ steps.presign.outputs.presigned_url }}"
