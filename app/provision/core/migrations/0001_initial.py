# Generated by Django 5.2.7 on 2025-10-18 21:48

import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='DeviceConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vendor', models.CharField(blank=True, max_length=50, verbose_name='vendor')),
                ('model', models.CharField(blank=True, max_length=50, verbose_name='model')),
                ('version', models.CharField(blank=True, max_length=50, verbose_name='version')),
                ('identifier', models.CharField(max_length=100, unique=True, verbose_name='identifier')),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True, verbose_name='ip address')),
                ('location', models.CharField(blank=True, max_length=255, verbose_name='location')),
                ('public_ip', models.GenericIPAddressField(blank=True, null=True, verbose_name='public ip')),
                ('private_ip', models.GenericIPAddressField(blank=True, null=True, verbose_name='private ip')),
                ('sip_server', models.CharField(blank=True, max_length=50, verbose_name='SIP server')),
                ('port_server', models.IntegerField(default=5060, help_text='Porta com 4 dígitos (entre 1000 e 9999).', validators=[django.core.validators.MinValueValidator(1000), django.core.validators.MaxValueValidator(9999)], verbose_name='port server')),
                ('protocol_type', models.CharField(choices=[('UDP', 'UDP'), ('TCP', 'TCP'), ('TLS', 'TLS')], default='UDP', max_length=3, verbose_name='protocol type')),
                ('mac_address', models.CharField(help_text='Apenas caracteres hexadecimais minúsculos (12 a 14 chars).', max_length=14, unique=True, validators=[django.core.validators.RegexValidator(message='MAC address must contain only lowercase hexadecimal characters and length between 12 and 14.', regex='^[0-9a-f]{12,14}$')], verbose_name='MAC address')),
                ('user_register', models.CharField(blank=True, max_length=21, verbose_name='user register')),
                ('passwd_register', models.CharField(blank=True, max_length=50, verbose_name='passwd register')),
                ('display_name', models.CharField(blank=True, max_length=50, verbose_name='display name')),
                ('display_number', models.CharField(blank=True, max_length=50, verbose_name='display number')),
                ('backup_server', models.CharField(blank=True, max_length=50, verbose_name='backup server')),
                ('domain_server', models.CharField(blank=True, max_length=50, verbose_name='domain server')),
                ('time_zone', models.CharField(blank=True, max_length=50, verbose_name='time zone')),
                ('srtp_enable', models.BooleanField(default=False, verbose_name='SRTP enabled')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('provisioned_at', models.DateTimeField(blank=True, null=True, verbose_name='provisioned at')),
                ('attempts_provisioning', models.PositiveIntegerField(default=0, verbose_name='attempts provisioning')),
                ('exported_to_rps', models.BooleanField(default=False, verbose_name='exported to RPS')),
            ],
            options={
                'verbose_name': 'Device configuration',
                'verbose_name_plural': 'Device configurations',
                'ordering': ['-created_at'],
            },
        ),
    ]
