"""
Django settings for provision project.

Generated by 'django-admin startproject' using Django 5.2.7.
"""
from dotenv import load_dotenv
from pathlib import Path
import os
import pymysql

pymysql.install_as_MySQLdb()

load_dotenv()


BASE_DIR = Path(__file__).resolve().parent.parent

SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY', 'fallback-key')
DEBUG = os.environ.get('DJANGO_DEBUG', 'False') == 'True'
ALLOWED_HOSTS = os.environ.get('DJANGO_ALLOWED_HOSTS', 'localhost').split(',')

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'core',
    'api',
    'crispy_forms',
    'crispy_bootstrap4',
    'rest_framework',
    'rest_framework.authtoken',
    'drf_spectacular',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'provision.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'provision.wsgi.application'

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': os.environ.get('MYSQL_DATABASE', 'provision_db'),
        'USER': os.environ.get('MYSQL_USER', 'provision_user'),
        'PASSWORD': os.environ.get('MYSQL_PASSWORD', 'provision_pass'),
        'HOST': 'db',
        'PORT': '3306',
    }
}

MONGODB = {
    'HOST': os.getenv('MONGODB_HOST', 'localhost'),
    'PORT': int(os.getenv('MONGODB_PORT', 27017)),
    'DB_NAME': os.getenv('MONGODB_DB_NAME', 'your_mongo_db_name'),
    'USER': os.getenv('MONGODB_USER', ''),
    'PASSWORD': os.getenv('MONGODB_PASSWORD', ''),
}

# REST framework and drf-spectacular configuration to generate OpenAPI schema.
# Note: schema / UI endpoints are not added automatically by this change;
# you may expose them later under admin-only routes if desired.
REST_FRAMEWORK = {
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
}

SPECTACULAR_SETTINGS = {
    "TITLE": "Provision API",
    "DESCRIPTION": (
        "API de Provisionamento - documentação OpenAPI gerada pelo drf-spectacular.\n\n"
        "Resumo relevante:\n"
        "- O endpoint de download (GET /download-xml/) busca device por MAC normalizado (sem ':' '-' etc.) "
        "e, caso não encontre, faz fallback pelo campo identifier.\n"
        "- O arquivo retornado (XML/CFG) recebe valores preenchidos a partir do modelo DeviceConfig, incluindo "
        "o campo passwd_register (senha) — ATENÇÃO: este valor será incluído no arquivo retornado.\n"
        "- attempts_provisioning é registrado cumulativamente (incrementado a cada tentativa). provisioned_at "
        "é atualizado quando o arquivo é servido com sucesso, mas attempts_provisioning NÃO é zerado automaticamente.\n"
        "- O endpoint /device-info/ retorna os campos do modelo (agora incluindo public_ip/private_ip) — passwd_register "
        "também é incluído na resposta JSON por solicitação."
    ),
    "VERSION": "1.0.0",
    # You can add CONTACT, LICENSE, SERVERS, etc. here if needed
}

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
]